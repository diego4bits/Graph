"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4288],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,k=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return r?n.createElement(k,a(a({ref:t},c),{},{components:r})):n.createElement(k,a({ref:t},c))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[p]="string"==typeof e?e:o,a[1]=d;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6682:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const i={},a=void 0,d={unversionedId:"docs/red_black_tree/RedBlackTree/d_is_red",id:"docs/red_black_tree/RedBlackTree/d_is_red",title:"d_is_red",description:"is_red(node: Node) -> bool",source:"@site/docs/docs/red_black_tree/RedBlackTree/d_is_red.md",sourceDirName:"docs/red_black_tree/RedBlackTree",slug:"/docs/red_black_tree/RedBlackTree/d_is_red",permalink:"/Graph/docs/red_black_tree/RedBlackTree/d_is_red",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_insert",permalink:"/Graph/docs/red_black_tree/RedBlackTree/d_insert"},next:{title:"d_left_rotate",permalink:"/Graph/docs/red_black_tree/RedBlackTree/d_left_rotate"}},l={},s=[{value:"<code>is_red(node: Node) -&gt; bool</code>",id:"is_rednode-node---bool",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:s},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"is_rednode-node---bool"},(0,o.kt)("inlineCode",{parentName:"h2"},"is_red(node: Node) -> bool")),(0,o.kt)("h4",{id:"description"},"Description:"),(0,o.kt)("p",null,"This method checks if a given node is red. It is used to determine the color of a node in a Red-Black Tree. This method belongs to the class ",(0,o.kt)("inlineCode",{parentName:"p"},"RedBlackTree"),"."),(0,o.kt)("h4",{id:"parameters"},"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Node"),"): The node to be checked.")),(0,o.kt)("h4",{id:"returns"},"Returns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bool"),": Returns ",(0,o.kt)("inlineCode",{parentName:"li"},"True")," if the given node is red, otherwise ",(0,o.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,o.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate how to use the 'is_red' method\ntree = RedBlackTree()\nnode1 = Node(10, Node.RED)\nnode2 = Node(20, Node.BLACK)\nnode3 = Node(30, Node.RED)\n\nresult_case1 = tree.is_red(node1)\nprint(result_case1)  # Output: True\n\nresult_case2 = tree.is_red(node2)\nprint(result_case2)  # Output: False\n\nresult_case3 = tree.is_red(node3)\nprint(result_case3)  # Output: True\n")),(0,o.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"is_red")," method first checks if the given node is ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," (i.e., empty node). If it is, then it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," since an empty node cannot be red. Otherwise, it checks the color attribute of the node. If the color attribute is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"Node.RED"),", it means the node is red, so the method returns ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),". Otherwise, it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,o.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,o.kt)("p",null,"This method does not have any dependencies."))}u.isMDXComponent=!0}}]);