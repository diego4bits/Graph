"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[161],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},k=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),k=r,m=p["".concat(s,".").concat(k)]||p[k]||u[k]||o;return t?i.createElement(m,a(a({ref:n},c),{},{components:t})):i.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=k;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var d=2;d<o;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}k.displayName="MDXCreateElement"},7218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=t(7462),r=(t(7294),t(3905));const o={},a=void 0,l={unversionedId:"docs/relation/Relation/is_node_linked_by",id:"docs/relation/Relation/is_node_linked_by",title:"is_node_linked_by",description:"isnodelinked_by(node Type) -> bool",source:"@site/docs/docs/relation/Relation/is_node_linked_by.md",sourceDirName:"docs/relation/Relation",slug:"/docs/relation/Relation/is_node_linked_by",permalink:"/Graph/docs/relation/Relation/is_node_linked_by",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"is_node_linked",permalink:"/Graph/docs/relation/Relation/is_node_linked"},next:{title:"link_nodes",permalink:"/Graph/docs/relation/Relation/link_nodes"}},s={},d=[{value:"<code>is_node_linked_by(node: Any, clazz: Type) -&gt; bool</code>",id:"is_node_linked_bynode-any-clazz-type---bool",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"is_node_linked_bynode-any-clazz-type---bool"},(0,r.kt)("inlineCode",{parentName:"h2"},"is_node_linked_by(node: Any, clazz: Type) -> bool")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method checks if a given node is linked by an edge of a specified class. It belongs to the class ",(0,r.kt)("inlineCode",{parentName:"p"},"Relation"),"."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"node")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Any"),"): The node to check if it is linked."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clazz")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Type"),"): The class of the edge to check if it links the node.")),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool"),": Returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if the node is linked by an edge of the specified class, otherwise returns ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nresult_case1 = relation.is_node_linked_by(node1, EdgeClass)\nprint(result_case1)\n\n# Another use case (if applicable)\nresult_case2 = relation.is_node_linked_by(node2, AnotherEdgeClass)\nprint(result_case2)\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The method first retrieves the edge linked to the given node from the ",(0,r.kt)("inlineCode",{parentName:"p"},"_node_edge_relation")," dictionary using the node as the key. Then it checks if the retrieved edge is an instance of the specified class using the ",(0,r.kt)("inlineCode",{parentName:"p"},"isinstance()")," function. If the edge is an instance of the specified class, it means that the node is linked by an edge of that class, and the method returns ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),". Otherwise, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("p",null,"This method does not have any dependencies."))}u.isMDXComponent=!0}}]);