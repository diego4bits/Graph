"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9973],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5104:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,c={unversionedId:"docs/relation/Relation/d_connected_nodes",id:"docs/relation/Relation/d_connected_nodes",title:"d_connected_nodes",description:"connected_nodes() -> dict",source:"@site/docs/docs/relation/Relation/d_connected_nodes.md",sourceDirName:"docs/relation/Relation",slug:"/docs/relation/Relation/d_connected_nodes",permalink:"/Graph/docs/relation/Relation/d_connected_nodes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d___init__",permalink:"/Graph/docs/relation/Relation/d___init__"},next:{title:"d_connected_nodes_by",permalink:"/Graph/docs/relation/Relation/d_connected_nodes_by"}},s={},d=[{value:"<code>connected_nodes() -&gt; dict</code>",id:"connected_nodes---dict",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],l={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"connected_nodes---dict"},(0,o.kt)("inlineCode",{parentName:"h2"},"connected_nodes() -> dict")),(0,o.kt)("h4",{id:"description"},"Description:"),(0,o.kt)("p",null,"This method returns a dictionary containing the items of the ",(0,o.kt)("inlineCode",{parentName:"p"},"_node_edge_relation")," attribute. It is used to obtain the connected nodes and their corresponding edges in a graph. This method belongs to the class ",(0,o.kt)("inlineCode",{parentName:"p"},"Relation"),"."),(0,o.kt)("h4",{id:"parameters"},"Parameters:"),(0,o.kt)("p",null,"This method does not take any parameters."),(0,o.kt)("h4",{id:"returns"},"Returns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dict"),": A dictionary containing the connected nodes and their corresponding edges.")),(0,o.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,o.kt)("p",null,"This method does not throw any exceptions."),(0,o.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nresult_case1 = connected_nodes()\nprint(result_case1)\n\n# Another use case (if applicable)\nresult_case2 = connected_nodes()\nprint(result_case2)\n")),(0,o.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,o.kt)("p",null,"This method simply returns the items of the ",(0,o.kt)("inlineCode",{parentName:"p"},"_node_edge_relation")," attribute, which is a dictionary that contains the connected nodes and their corresponding edges in a graph."),(0,o.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,o.kt)("p",null,"This method does not have any dependencies."))}u.isMDXComponent=!0}}]);