"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3047],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||i;return n?o.createElement(m,a(a({ref:t},s),{},{components:n})):o.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[p]="string"==typeof e?e:r,a[1]=d;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={},a=void 0,d={unversionedId:"docs/node/Node/d_connect_right",id:"docs/node/Node/d_connect_right",title:"d_connect_right",description:"connect_right(other str) -> None",source:"@site/docs/docs/node/Node/d_connect_right.md",sourceDirName:"docs/node/Node",slug:"/docs/node/Node/d_connect_right",permalink:"/Graph/docs/node/Node/d_connect_right",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_connect",permalink:"/Graph/docs/node/Node/d_connect"},next:{title:"d_connections",permalink:"/Graph/docs/node/Node/d_connections"}},l={},c=[{value:"<code>connect_right(other: Node, edge: str) -&gt; None</code>",id:"connect_rightother-node-edge-str---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],s={toc:c},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"connect_rightother-node-edge-str---none"},(0,r.kt)("inlineCode",{parentName:"h2"},"connect_right(other: Node, edge: str) -> None")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method performs the action of linking the current node to another node using a specified edge. It is used to establish a relationship between nodes in a graph. This method belongs to the class ",(0,r.kt)("inlineCode",{parentName:"p"},"Node"),"."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"other")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Node"),"): The node to which the current node will be connected."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edge")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): The edge that will be used to establish the connection between the nodes.")),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"None"),": This method does not return any value.")),(0,r.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,r.kt)("p",null,"This method does not throw any exceptions."),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nnode1 = Node()\nnode2 = Node()\nnode1.connect_right(node2, 'edge')\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"connect_right")," method uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"_relation")," attribute of the current node to link it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"other")," node using the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"edge"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"_relation.link_nodes()")," method is called with the current node as the source node and the ",(0,r.kt)("inlineCode",{parentName:"p"},"other")," node as the target node, along with the ",(0,r.kt)("inlineCode",{parentName:"p"},"edge")," parameter. This establishes a relationship between the two nodes."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Relation"),": This method depends on the ",(0,r.kt)("inlineCode",{parentName:"li"},"Relation")," class, which is imported from the ",(0,r.kt)("inlineCode",{parentName:"li"},"Relation")," module. The ",(0,r.kt)("inlineCode",{parentName:"li"},"Relation")," class provides the functionality for linking nodes and managing relationships in the graph.")))}h.isMDXComponent=!0}}]);