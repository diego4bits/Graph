"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9681],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(r),u=o,m=s["".concat(d,".").concat(u)]||s[u]||h[u]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5163:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={},i=void 0,l={unversionedId:"docs/red_black_tree/RedBlackTree/d_right_rotate",id:"docs/red_black_tree/RedBlackTree/d_right_rotate",title:"d_right_rotate",description:"right_rotate(y: Node) -> None",source:"@site/docs/docs/red_black_tree/RedBlackTree/d_right_rotate.md",sourceDirName:"docs/red_black_tree/RedBlackTree",slug:"/docs/red_black_tree/RedBlackTree/d_right_rotate",permalink:"/Graph/docs/red_black_tree/RedBlackTree/d_right_rotate",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_left_rotate",permalink:"/Graph/docs/red_black_tree/RedBlackTree/d_left_rotate"},next:{title:"d_Node",permalink:"/Graph/docs/red_black_tree/d_Node"}},d={},p=[{value:"<code>right_rotate(y: Node) -&gt; None</code>",id:"right_rotatey-node---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:p},s="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(s,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"right_rotatey-node---none"},(0,o.kt)("inlineCode",{parentName:"h2"},"right_rotate(y: Node) -> None")),(0,o.kt)("h4",{id:"description"},"Description:"),(0,o.kt)("p",null,"This method performs a right rotation operation on the Red-Black Tree. It is used to balance the tree after an insertion or deletion operation. This method belongs to the class RedBlackTree."),(0,o.kt)("h4",{id:"parameters"},"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"y")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Node"),"): The node on which the right rotation operation is performed.")),(0,o.kt)("h4",{id:"returns"},"Returns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"None"),": This method does not return anything.")),(0,o.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This method does not throw any exceptions.")),(0,o.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\ntree = RedBlackTree()\nnode = Node(5)\ntree.right_rotate(node)\n")),(0,o.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"right_rotate")," method performs the following steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Assign the left child of ",(0,o.kt)("inlineCode",{parentName:"li"},"y")," to a variable ",(0,o.kt)("inlineCode",{parentName:"li"},"x"),"."),(0,o.kt)("li",{parentName:"ol"},"Update the left child of ",(0,o.kt)("inlineCode",{parentName:"li"},"y")," with the right child of ",(0,o.kt)("inlineCode",{parentName:"li"},"x"),"."),(0,o.kt)("li",{parentName:"ol"},"If the right child of ",(0,o.kt)("inlineCode",{parentName:"li"},"x")," is not the NIL leaf node, update its parent to be ",(0,o.kt)("inlineCode",{parentName:"li"},"y"),"."),(0,o.kt)("li",{parentName:"ol"},"Update the parent of ",(0,o.kt)("inlineCode",{parentName:"li"},"x")," to be the parent of ",(0,o.kt)("inlineCode",{parentName:"li"},"y"),"."),(0,o.kt)("li",{parentName:"ol"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"y")," is the root of the tree (i.e., its parent is None), update the root to be ",(0,o.kt)("inlineCode",{parentName:"li"},"x"),"."),(0,o.kt)("li",{parentName:"ol"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"y")," is the left child of its parent, update the left child of the parent to be ",(0,o.kt)("inlineCode",{parentName:"li"},"x"),"."),(0,o.kt)("li",{parentName:"ol"},"Otherwise, update the right child of the parent to be ",(0,o.kt)("inlineCode",{parentName:"li"},"x"),"."),(0,o.kt)("li",{parentName:"ol"},"Set the right child of ",(0,o.kt)("inlineCode",{parentName:"li"},"x")," to be ",(0,o.kt)("inlineCode",{parentName:"li"},"y"),"."),(0,o.kt)("li",{parentName:"ol"},"Update the parent of ",(0,o.kt)("inlineCode",{parentName:"li"},"y")," to be ",(0,o.kt)("inlineCode",{parentName:"li"},"x"),".")),(0,o.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This method does not have any dependencies.")))}h.isMDXComponent=!0}}]);