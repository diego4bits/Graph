"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9395],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(n),h=r,y=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return n?o.createElement(y,a(a({ref:t},d),{},{components:n})):o.createElement(y,a({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4373:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const i={},a=void 0,c={unversionedId:"docs/node/Node/connections_by",id:"docs/node/Node/connections_by",title:"connections_by",description:"connections_by(clazz: Type) -> List[Node]",source:"@site/docs/docs/node/Node/connections_by.md",sourceDirName:"docs/node/Node",slug:"/docs/node/Node/connections_by",permalink:"/Graph/docs/node/Node/connections_by",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"connections",permalink:"/Graph/docs/node/Node/connections"},next:{title:"d___init__",permalink:"/Graph/docs/node/Node/d___init__"}},l={},s=[{value:"<code>connections_by(clazz: Type) -&gt; List[Node]</code>",id:"connections_byclazz-type---listnode",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"connections_byclazz-type---listnode"},(0,r.kt)("inlineCode",{parentName:"h2"},"connections_by(clazz: Type) -> List[Node]")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method returns a list of nodes that are connected to the current node through a specific type of relation. This method belongs to the class 'Node'."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clazz")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Type"),"): The type of relation that the connected nodes should have.")),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List[Node]"),": A list of nodes that are connected to the current node through the specified relation type.")),(0,r.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,r.kt)("p",null,"This method does not throw any exceptions."),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Example 1: Get all nodes connected through a "Friend" relation\nfriend_nodes = node.connections_by(Friend)\nprint(friend_nodes)\n\n# Example 2: Get all nodes connected through a "Colleague" relation\ncolleague_nodes = node.connections_by(Colleague)\nprint(colleague_nodes)\n')),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"This method calls the '_relation.connected_nodes_by(clazz)' method to retrieve the connected nodes of the specified relation type. The returned nodes are then returned as a list."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Relation"),": A dependency that provides the 'connected_nodes_by' method used to retrieve the connected nodes.")))}u.isMDXComponent=!0}}]);